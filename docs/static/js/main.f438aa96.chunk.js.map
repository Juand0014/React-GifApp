{"version":3,"sources":["components/GifsGridItem.js","components/AddCategory.js","components/GifGrid.js","GifExpertApp.js","index.js","helpers/getGifs.js","hooks/useFetchGifs.js"],"names":["GifsGridItem","title","url","className","src","alt","useState","require","AddCategory","setCategories","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","useFetchGifs","GifGrid","category","images","data","loading","map","img","id","GifExpertApp","categories","ReactDOM","render","document","getElementById","getGifs","a","encodeURI","fetch","resp","json","gifs","downsized_medium","useEffect","state","setState","then","imgs"],"mappings":"sLACaA,EAAe,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEjC,OACI,sBAAKC,UAAU,yCAAf,UACG,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,S,0GCNPK,EAAaC,EAAQ,GAArBD,SAIKE,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCH,EAAS,IAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BP,GAAc,SAAAQ,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCTvBnB,EAAiBO,EAAQ,IAAzBP,aACAsB,EAAiBf,EAAQ,IAAzBe,aAGKC,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEtB,EAA+BF,EAAaE,GAAhCC,EAAZ,EAAOC,KAAaC,EAApB,EAAoBA,QAIpB,OACI,qCACI,oBAAIxB,UAAU,wCAAd,SAAwDqB,IAEtDG,GAAW,mBAAGxB,UAAU,wCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAEWsB,EAAOT,OAAS,GAAKS,EAAOG,KAAI,SAAAC,GAAG,OACnC,cAAC7B,EAAD,eAEY6B,GADEA,EAAIC,aCjBlCxB,EAAaC,EAAQ,GAArBD,SACKyB,EAAe,WAExB,MAAoCzB,EAAS,CAAC,cAA9C,mBAAO0B,EAAP,KAAmBvB,EAAnB,KAEA,OACI,qCACI,oDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQuB,EAAWJ,KAAI,SAAAJ,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCZ7BS,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,U,sHCPbC,EAAO,uCAAG,WAAMb,GAAN,uBAAAc,EAAA,6DAEbpC,EAFa,iDAEmCqC,UAAUf,GAF7C,+DAGAgB,MAAOtC,GAHP,cAGbuC,EAHa,gBAIIA,EAAKC,OAJT,uBAIXhB,EAJW,EAIXA,KAEFiB,EAAOjB,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACR7B,MAAO4B,EAAI5B,MACXC,IAAG,UAAE2B,EAAIJ,cAAN,aAAE,EAAYmB,iBAAiB1C,QAVvB,kBAcZyC,GAdY,4CAAH,sDCCpB,EAAgCpC,EAAQ,GAAhCD,EAAR,EAAQA,SAAUuC,EAAlB,EAAkBA,UACLvB,EAAe,SAAEE,GAE1B,MAA0BlB,EAAS,CAC/BoB,KAAK,GACLC,SAAS,IAFb,mBAAOmB,EAAP,KAAcC,EAAd,KAiBA,OAZAF,GAAU,WAENR,EAAQb,GACHwB,MAAK,SAAAC,GACFF,EAAS,CACLrB,KAAMuB,EACNtB,SAAS,SAItB,CAACH,IAEGsB,K","file":"static/js/main.f438aa96.chunk.js","sourcesContent":["\r\nexport const GifsGridItem = ({title, url}) => {\r\n    \r\n    return (\r\n        <div className='card animate__animated animate__zoomIn'>\r\n           <img src={url} alt={title}/>\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","const { useState } = require('react');\r\nconst PropTypes = require('prop-types')\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [InputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e)=>{\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        if (InputValue.trim().length > 2){\r\n            setCategories(cats => [InputValue,...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type='text'\r\n                value={ InputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}","const { GifsGridItem } = require('./GifsGridItem');\r\nconst { useFetchGifs } = require(\"../hooks/useFetchGifs\");\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__zoomInDown\">{ category }</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__zoomInDown\">Loading</p>}\r\n\r\n            {<div className='card-grid'>\r\n                    {\r\n                        images.length > 0 && images.map(img => (\r\n                        <GifsGridItem\r\n                                key={ img.id }\r\n                                {...img }\r\n                        />\r\n                        ))\r\n                    }\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n","import { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nconst { useState } = require('react')\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    return (\r\n        <>\r\n            <h2>D' Pavo search</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                { \r\n                    categories.map(category =>(\r\n                        <GifGrid \r\n                        key={category}\r\n                        category={category}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n); ","\r\nexport const getGifs = async(category) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=e6UnFaa1MnHKWuVnEbkRm9wKs0WTRNIt`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}  ","import { getGifs } from '../helpers/getGifs';\r\n\r\nconst { useState, useEffect } = require('react');\r\nexport const useFetchGifs = ( category )=>{\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(()=>{\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state;\r\n}"],"sourceRoot":""}